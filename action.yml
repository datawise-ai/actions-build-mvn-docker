name: "datawise-build-mvn-docker"
description: "datawise build and push mvn container docker"
inputs:
  PROJECT:
    required: true
  APP:
    required: true
  SERVICE:
    required: true
  INSTANCE:
    required: true
  VERSION:
    required: true
  DOCKER_REPOSITORY_BASE:
    required: true
    default: "docker.datawise.ai"
  DOCKER_USER:
    required: true
    default: "builder"
  DOCKER_PASS:
    required: true
  JAVA_VERSION:
    required: true
  JAVA_DISTRIBUTION:
    required: true
    default: "temurin"
  JIB_JAVA_BASE:
    required: true
    default: "eclipse-temurin"
  JIB_VERSION:
    required: true
    default: "3.3.0"
  BUILD_ARGS:
    required: false
    default: ""
  SKIP_TESTS:
    required: false
    default: "false"
runs:
  using: "composite"
  steps:

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: setup docker context for buildx
      id: buildx-context
      shell: bash
      run: |
        docker context create builders || true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        endpoint: builders

    - name: Login to Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.PROJECT }}.${{ inputs.DOCKER_REPOSITORY_BASE }}
        username: builder
        password: ${{ inputs.DOCKER_PASS }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ inputs.PROJECT }}.${{ inputs.DOCKER_REPOSITORY_BASE }}/${{ inputs.APP }}-${{ inputs.SERVICE }}-${{ inputs.INSTANCE }}
        flavor: |
          latest=true
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=ref,event=tag
          type=raw,value=${{ inputs.VERSION }}
          type=semver,pattern={{version}}
          type=raw,value={{date 'YYYYMMDD'}}
          type=sha

    - name: prepare tags for mvn (comma sep)
      id: tags_for_mvn
      shell: bash
      run: |
          export IMAGE_WITH_TAGS="${{ steps.meta.outputs.tags }}"
          export REMOVE_THIS="${{ inputs.PROJECT }}.${{ inputs.DOCKER_REPOSITORY_BASE }}/${{ inputs.APP }}-${{ inputs.SERVICE }}-${{ inputs.INSTANCE }}:"
          export RESULT=$(sed -r "s|${REMOVE_THIS}||g" <<< "${IMAGE_WITH_TAGS}")
          echo $RESULT
          export RESULT2=$(sed -r 's/\s+/,/g' <<< `echo $RESULT`)
          echo $RESULT2
          echo "tags=${RESULT2}" >> $GITHUB_OUTPUT

    - uses: actions/checkout@v2

    - uses: actions/setup-java@v3
      with:
        distribution: ${{ inputs.JAVA_DISTRIBUTION }}
        java-version: ${{ inputs.JAVA_VERSION }}

    - name: Cache mvn packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.OS }}-mvn-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.OS }}-mvn-
          ${{ runner.OS }}-


    - name: Jib build
      shell: bash
      run: |
        mvn -B -e compile -Dmaven.test.skip=${{ inputs.SKIP_TESTS }} \
            com.google.cloud.tools:jib-maven-plugin:${{ inputs.JIB_VERSION }}:build \
            -Djib.from.image=${{ inputs.JIB_JAVA_BASE }}:${{ inputs.JAVA_VERSION }}  \
            -Djib.to.image=${{ inputs.PROJECT }}.${{ inputs.DOCKER_REPOSITORY_BASE }}/${{ inputs.APP }}-${{ inputs.SERVICE }}-${{ inputs.INSTANCE }}  \
            -Djib.container.creationTime=USE_CURRENT_TIMESTAMP \
            -Djib.to.tags=${{ steps.tags_for_mvn.outputs.tags }}  ${{ inputs.BUILD_ARGS }}
#            -Djib.to.tags=${{ inputs.VERSION }},latest ${{ inputs.BUILD_ARGS }}
